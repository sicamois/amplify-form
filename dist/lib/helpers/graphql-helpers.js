"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formSchemaFromGraphQLTypes = void 0;

var _stringHelpers = require("./string-helpers");

var formSchemaFromGraphQLTypes = function formSchemaFromGraphQLTypes(graphqlJSONSchema, entity) {
  var fileFields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var formSchema = {};

  var type = graphqlJSONSchema.data.__schema.types.find(function (type) {
    return type.name.toLowerCase() === entity.toLowerCase();
  });

  if (!type) throw Error("Unable to find ".concat(entity, " in GraphQL Schema"));
  var fields = type.fields || type.inputFields;
  if (!fields) throw Error('Invalid GraphQL Schema');
  fields.forEach(function (field) {
    var _type$ofType;

    var required = field.type.kind === 'NON_NULL';
    var type = required ? field.type.ofType : field.type;
    if (field.name === 'id' || type.name === 'AWSDateTime') return;
    var fieldCharacteritics = {
      name: field.name,
      label: (0, _stringHelpers.capitalize)(field.name),
      required: required
    };

    if (fileFields.some(function (fileField) {
      return fileField.name === field.name;
    })) {
      fieldCharacteritics.type = 'file';
      fieldCharacteritics.multiple = type.kind === 'LIST';
    } else {
      switch (type.kind) {
        case 'SCALAR':
          switch (type.name) {
            case 'String':
              fieldCharacteritics.type = 'text';
              break;

            case 'Int':
              fieldCharacteritics.type = 'number';
              break;

            case 'Float':
              fieldCharacteritics.type = 'number';
              fieldCharacteritics.step = 0.01;
              break;

            case 'Boolean':
              fieldCharacteritics.type = 'checkbox';
              break;

            case 'ID':
              fieldCharacteritics.type = 'relationship';
              break;
          }

          break;

        case 'ENUM':
          fieldCharacteritics.type = 'select';
          fieldCharacteritics.options = Object.values(type.name).map(function (value) {
            return {
              value: value,
              label: (0, _stringHelpers.capitalize)(value)
            };
          });
          break;

        case 'LIST':
          fieldCharacteritics.required = fieldCharacteritics.required || ((_type$ofType = type.ofType) === null || _type$ofType === void 0 ? void 0 : _type$ofType.kind) === 'NON_NULL';
          fieldCharacteritics.type = 'list';
          fieldCharacteritics.multiple = true;
          var listElementType = type.ofType.ofType ? type.ofType.ofType : type.ofType;

          if (listElementType.kind === 'ENUM') {
            fieldCharacteritics.options = Object.values(listElementType.name).map(function (value) {
              return {
                value: value,
                label: (0, _stringHelpers.capitalize)(value)
              };
            });
          }

          break;

        case 'INPUT_OBJECT':
          fieldCharacteritics = formSchemaFromGraphQLTypes(graphqlJSONSchema, type.name) || {};
          break;
      }
    }

    formSchema[field.name] = fieldCharacteritics;
  });
  return formSchema;
};

exports.formSchemaFromGraphQLTypes = formSchemaFromGraphQLTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,